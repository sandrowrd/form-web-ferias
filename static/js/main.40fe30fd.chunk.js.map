{"version":3,"sources":["containers/containersCommonFile/containerIdentify.tsx","containers/containersCommonFile/containeEmployee.tsx","containers/containersVacation/containerInfoVacation.tsx","containers/containersVacation/containerVacation.tsx","containers/containersCommonFile/containerObservation.tsx","layoutPage/FormPageVacation.tsx","App.tsx","index.tsx"],"names":["ContainerIdentify","own","useState","name","value","fields","Form","useForm","form","labelCol","span","wrapperCol","labelAlign","onFieldsChange","_","allFields","gutter","Item","label","readOnly","hidden","Group","defaultValue","buttonStyle","onChange","setFieldsValue","who","target","submit","Button","style","marginLeft","ContainerEmployee","setFields","Option","Select","rules","required","message","title","allowClear","showSearch","placeholder","optionFilterProp","filterOption","input","option","children","toLowerCase","indexOf","toLocaleLowerCase","id","map","index","ContainerInfoVacation","hasData","rowSelection","undefined","tableConfig","convertStringDate","dateString","strDate","dateStr","substring","Date","columns","dataIndex","key","render","dateNow","now","dateBegin","perAqIn","dateEnd","perAqEnd","part","dateRef","dateIn","setDate","getDate","console","log","EditOutlined","allfields","pagination","dataSource","status","day","salary13","allowence","onRow","record","onClick","event","tableInfo","onRowSelection","ContainerVacation","props","fieldsForm","setFieldsForm","enaRow01","enaRow02","enaRow","setEnaRow","abono","setAbono","dayVacation","getFieldValue","textData","textDays","warningNote","description","notification","open","icon","WarningOutlined","color","background","duration","date","days","data","toLocaleDateString","datePgVacation","dayWeek","getDay","dataPgo","num","validationDayDate","chosenDate","data01","timeMin","parse","_d","newDate","refDate","getFullYear","getMonth","newChosenDate","parseInt","validatorDate","dayweek","today","diff","Math","abs","getTime","ceil","validatorDays","diffDays","dayP1","dayP2","set","show01","show02","justify","width","validator","vacationDays","daysVacation01","third","dayvac","checked","placement","validDate","datEnd","datePgo","vacationDay","dateEndVacation01","datePgto01","Promise","resolve","reject","Error","format","testDate","totalDays","length","datEndP1","daysVacation02","dateEndVacation02","dateBeginVacation02","datePgto02","daysVacation03","dateEndVacation03","dateBeginVacation03","datePgto03","dateBegin02","datePgo2","diasP2","datEndP2","daysVac03","dataInP3","datePgo3","datEndP3","min","max","ena","dateBeguinVacation03","daysVac02","marginTop","direction","size","display","ContainerObservation","usu","dateTime","role","setDataSource","count","setCount","onFinish","values","newObs","toString","toLocaleString","timeZone","prev","block","type","htmlType","TextArea","showCount","maxLength","FormPageVacation","showRow","setShowRow","employee","setEmployee","Provider","onFormFinish","forms","formVacation","element","document","querySelector","i","moment","classList","remove","App","className","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.40fe30fd.chunk.js","sourcesContent":["import { Input, Form, Row, Col, Radio } from \"antd\";\r\nimport \"./container.css\";\r\nimport { useState } from \"react\";\r\nimport { FieldData } from \"./containerInterface\";\r\nimport { sendRequest } from \"../../controlers/services/userRequest\";\r\n//import { WorkflowService } from \"../../core/workflow.service\";\r\n\r\n//const DataWorkflow = new WorkflowService();\r\n\r\n//const DataUser = DataWorkflow.requestUserData();\r\n\r\ninterface DataSubordinate {\r\n  nomfun: string;\r\n  numemp: number;\r\n  numcad: number;\r\n  tipcol: number;\r\n  postra: string;\r\n}\r\n\r\ninterface DataRequester {\r\n  codthp: number;\r\n  estpos: number;\r\n  idepos: number;\r\n}\r\n\r\nexport let DataToRequest: DataRequester;\r\n\r\nexport function ContainerIdentify(own) {\r\n  const [fields, setFields] = useState<FieldData[]>([\r\n    { name: \"fullname\", value: \"\" },\r\n    { name: \"registry\", value: \"\" },\r\n    { name: \"subsidiary\", value: \"\" },\r\n    { name: \"office\", value: \"\" },\r\n    { name: \"boss\", value: \"\" },\r\n    { name: \"who\", value: \"\" },\r\n  ]);\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  /* DataUser.then((response) => {\r\n    let nome = response.fullname;\r\n    console.log(response);\r\n    //console.log(typeof nome);\r\n\r\n    const paramName = {\r\n      //nome: response.fullname,\r\n      //email: response.email,\r\n      nome: \"Bruno Milani\",\r\n      email: \"brunomilani@cvccorp.com.br\",\r\n    };\r\n\r\n    const dataUserRequest = sendRequest(\r\n      \"POST\",\r\n      \"br.com.cvc.wf.geral\",\r\n      \"GetDadosSolicitante\",\r\n      paramName\r\n    );\r\n\r\n    const paramReq = {\r\n      codthp: dataUserRequest.codthp,\r\n      estpos: dataUserRequest.estpos,\r\n      idepos: dataUserRequest.idepos,\r\n    };\r\n\r\n    const getSubordinados = sendRequest(\r\n      \"POST\",\r\n      \"br.com.cvc.wf.geral\",\r\n      \"GetSubordinados\",\r\n      paramReq\r\n    );\r\n\r\n    //console.log(dataUserRequest);\r\n    //console.log(getSubordinados.colaboradores);\r\n\r\n    form.setFieldsValue({\r\n      fullname: dataUserRequest.nome,\r\n      registry: dataUserRequest.numcad,\r\n      subsidiary: dataUserRequest.filial,\r\n      office: dataUserRequest.cargo,\r\n      boss: dataUserRequest.supime,\r\n    });\r\n  }); */\r\n\r\n  /* const paramName = {\r\n    //nome: response.fullname,\r\n    //email: response.email,\r\n    nome: \"Bruno Milani\",\r\n    email: \"brunomilani@cvccorp.com.br\",\r\n  };\r\n\r\n  const dataUserRequest = sendRequest(\r\n    \"POST\",\r\n    \"br.com.cvc.wf.geral\",\r\n    \"GetDadosSolicitante\",\r\n    paramName\r\n  );\r\n\r\n  dataUserRequest.then(async (response) => {\r\n    console.log(response);\r\n    //console.log(response.nome);\r\n\r\n    DataToRequest = {\r\n      codthp: response.codthp,\r\n      estpos: response.estpos,\r\n      idepos: response.idepos,\r\n    };\r\n\r\n    form.setFieldsValue({\r\n      fullname: response.nome,\r\n      registry: response.numcad,\r\n      subsidiary: response.filial,\r\n      office: response.cargo,\r\n      boss: response.supime,\r\n    });\r\n  });\r\n */\r\n  //subordinate = getSubordinados.colaboradores;\r\n\r\n  //console.log(subordinate);\r\n  //console.log(getSubordinados.colaboradores);\r\n\r\n  /* form.setFieldsValue({\r\n    fullname: dataUserRequest.nome,\r\n    registry: dataUserRequest.numcad,\r\n    subsidiary: dataUserRequest.filial,\r\n    office: dataUserRequest.cargo,\r\n    boss: dataUserRequest.supime,\r\n  });\r\n */\r\n  //console.log(subordinate);\r\n\r\n  const onChangeRadio = (value) => {\r\n    //console.log(value.target.value);\r\n    form.setFieldsValue({ who: value.target.value });\r\n    form.submit();\r\n  };\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Identificação do Solicitante</legend>\r\n        <Form\r\n          name=\"formIdentify\"\r\n          labelCol={{ span: 10 }}\r\n          wrapperCol={{ span: 12 }}\r\n          labelAlign=\"left\"\r\n          fields={fields}\r\n          form={form}\r\n          onFieldsChange={(_, allFields) => {}}\r\n        >\r\n          <Row gutter={50}>\r\n            <Col span={12}>\r\n              <Form.Item name={\"fullname\"} label={\"Nome Solicitante\"}>\r\n                <Input />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item name={\"registry\"} label={\"Matrícula\"}>\r\n                <Input readOnly />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={50}>\r\n            <Col span={12}>\r\n              <Form.Item name={\"office\"} label={\"Cargo Solicitante\"}>\r\n                <Input readOnly />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item name={\"subsidiary\"} label={\"Filial\"}>\r\n                <Input readOnly />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={50}>\r\n            <Col span={12}>\r\n              <Form.Item name={\"boss\"} label={\"Superior Imediato\"}>\r\n                <Input readOnly />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <span hidden={own.own}>\r\n                <Form.Item\r\n                  name={\"who\"}\r\n                  label={\"Solicitação de Férias\"}\r\n                  labelAlign=\"left\"\r\n                >\r\n                  <Radio.Group\r\n                    defaultValue=\"ownVacation\"\r\n                    buttonStyle=\"solid\"\r\n                    onChange={onChangeRadio}\r\n                  >\r\n                    <Radio.Button value={\"ownVacation\"}>Própria</Radio.Button>\r\n                    <Radio.Button\r\n                      value={\"employeeVacation\"}\r\n                      style={{ marginLeft: \"20px\" }}\r\n                    >\r\n                      Colaborador\r\n                    </Radio.Button>\r\n                  </Radio.Group>\r\n                </Form.Item>\r\n              </span>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </fieldset>\r\n    </>\r\n  );\r\n}\r\n","import { Input, Form, Row, Col, Select, Tooltip } from \"antd\";\r\nimport \"./container.css\";\r\nimport { useState } from \"react\";\r\nimport { FieldData } from \"./containerInterface\";\r\n//import { DataToRequest } from \"./containerIdentify\";\r\n//import { sendRequest } from \"../../controlers/services/userRequest\";\r\n//import { response } from \"express\";\r\n//import Item from \"antd/lib/list/Item\";\r\n//import { nodeModuleNameResolver } from \"typescript\";\r\n\r\ninterface DataSubordinate {\r\n  nomfun: string;\r\n  numemp?: number;\r\n  numcad?: number;\r\n  tipcol?: number;\r\n  postra?: string;\r\n}\r\n\r\n//let dataEmployees: DataSubordinate[] | any;\r\n\r\nexport default function ContainerEmployee() {\r\n  const [fields, setFields] = useState<FieldData[]>([\r\n    { name: [\"registryEmployee\"], value: \"\" },\r\n    { name: [\"positionemployee\"], value: \"\" },\r\n    { name: [\"subsidiaryEmployee\"], value: \"\" },\r\n    { name: [\"bossEmployee\"], value: \"\" },\r\n    { name: [\"custCenter\"], value: \"\" },\r\n  ]);\r\n\r\n  const [optionName, setOptionName] = useState([\r\n    \"Patricia\",\r\n    \"Gustavo\",\r\n    \"Maria\",\r\n  ]);\r\n\r\n  const names = [\r\n    { id: 1, name: \"Patricia\" },\r\n    { id: 2, name: \"Gustavo\" },\r\n    { id: 3, name: \"Maria\" },\r\n  ];\r\n\r\n  //console.log(DataToRequest);\r\n  //console.log(DataToRequest.DataToRequest);\r\n\r\n  //const dataInfo = DataToRequest.DataToRequest;\r\n\r\n  let nameEmployees: string[];\r\n  //console.log(dataInfo);\r\n\r\n  /* const handleSearch = () => {\r\n    console.log(optionName);\r\n    //fetchList(setOptionName);\r\n  }; */\r\n\r\n  /* if (dataInfo) {\r\n    const url =\r\n      \"http://localhost:8080/SXI/G5Rest?server=http://localhost:8080&module=rubi&service=br.com.cvc.wf.geral&port=GetSubordinados&DEBUG=true\";\r\n\r\n    const username = \"senior\";\r\n    const password = \"senior\";\r\n\r\n    const paramReq = {\r\n      codthp: dataInfo.codthp,\r\n      estpos: dataInfo.estpos,\r\n      idepos: dataInfo.idepos,\r\n    };\r\n\r\n    dataEmployees = fetch(url, {\r\n      mode: \"cors\",\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json;charset=utf-8\",\r\n        Authorization: \"Basic \" + window.btoa(username + \":\" + password),\r\n        user: \"senior\",\r\n      },\r\n      body: JSON.stringify(paramReq),\r\n    })\r\n      .then((response) => {\r\n        console.log(response);\r\n        return response.json();\r\n      })\r\n      .then((user) => {\r\n        console.log(user.colaboradores);\r\n        return user.colaboradores;\r\n        return user.colaboradores.map((item) => ({\r\n          nomfun: item.nomfun,\r\n          numemp: item.numemp,\r\n          numcad: item.numcad,\r\n          tipcol: item.tipcol,\r\n          postra: item.postra,\r\n        }));\r\n      });\r\n  } */\r\n\r\n  //console.log(dataEmployees);\r\n\r\n  /* dataEmployees.then((response) => {\r\n    console.log(response.colaboradores);\r\n  }); */\r\n\r\n  /* if (dataInfo) {\r\n    const paramReq = {\r\n      codthp: dataInfo.codthp,\r\n      estpos: dataInfo.estpos,\r\n      idepos: dataInfo.idepos,\r\n    };\r\n\r\n    console.log(paramReq);\r\n\r\n    const getSubordinados = sendRequest(\r\n      \"POST\",\r\n      \"br.com.cvc.wf.geral\",\r\n      \"GetSubordinados\",\r\n      paramReq\r\n    );\r\n\r\n    getSubordinados.then((response) => {\r\n      console.log(response);\r\n      console.log(response.colaboradores[3]);\r\n      for (let i = 1; i < Object.keys(response.colaboradores).length; i++) {\r\n        dataEmployees.push(response.colaboradores[i].nomfun);\r\n      }\r\n    });\r\n\r\n    console.log(dataEmployees);\r\n    //console.log(getSubordinados);\r\n\r\n    dataEmployees.map((nome) => {\r\n      console.log(nome);\r\n    });\r\n  }\r\n */\r\n  //console.log(dataEmployees);\r\n  //console.log(JSON.stringify(dataEmployees));\r\n  //console.log(typeof dataEmployees);\r\n  /* dataEmployees.then((response) => {\r\n    //console.log(response);\r\n    //console.log(typeof response);\r\n    response.forEach((element) => {\r\n      console.log(element.nomfun);\r\n    });\r\n  }); */\r\n\r\n  //console.log(dataEmployees);\r\n  //console.log(typeof dataEmployees);\r\n\r\n  const { Option } = Select;\r\n\r\n  //let options: any[];\r\n\r\n  /* async function fetchList() {\r\n    const url =\r\n      \"http://localhost:8080/SXI/G5Rest?server=http://localhost:8080&module=rubi&service=br.com.cvc.wf.geral&port=GetSubordinados&DEBUG=true\";\r\n\r\n    const username = \"senior\";\r\n    const password = \"senior\";\r\n\r\n    const paramReq = {\r\n      codthp: 1,\r\n      estpos: 2,\r\n      idepos: 1,\r\n    };\r\n\r\n    const response = await fetch(url, {\r\n      mode: \"cors\",\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json;charset=utf-8\",\r\n        Authorization: \"Basic \" + window.btoa(username + \":\" + password),\r\n        user: \"senior\",\r\n      },\r\n      body: JSON.stringify(paramReq),\r\n    });\r\n\r\n    let colaboradores = [];\r\n    response.json().then((data) => {\r\n      //console.log(data.colaboradores);\r\n      colaboradores.push(data.colaboradores.map((repo) => repo.nomfun));\r\n      //console.log(colaboradores);\r\n    });\r\n\r\n    setOptionName(colaboradores);\r\n    console.log(colaboradores);\r\n    console.log(optionName);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchList();\r\n  }, []); */\r\n\r\n  function options() {\r\n    const names = Object.entries(optionName[0]);\r\n    //console.log(optionName[0][1]);\r\n    //console.log(names);\r\n    for (const key in names) {\r\n      console.log(key);\r\n      console.log(names);\r\n      return (\r\n        <Option key={key} value={names[key][1]}>\r\n          {names[key][1]}\r\n        </Option>\r\n      );\r\n    }\r\n    //return <Option value={item}>{item}</Option>;\r\n  }\r\n\r\n  //options();\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Informações do Colaborador</legend>\r\n\r\n        <Form\r\n          name=\"formEmployee\"\r\n          labelCol={{ span: 10 }}\r\n          wrapperCol={{ span: 12 }}\r\n          labelAlign=\"left\"\r\n          fields={fields}\r\n          onFieldsChange={(_, allFields) => {\r\n            setFields(allFields);\r\n          }}\r\n        >\r\n          <Row gutter={20}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                name={[\"nameEmployee\"]}\r\n                label={\"Colaborador\"}\r\n                rules={[\r\n                  { required: true },\r\n                  { message: \"Obrigatório selecionar o colaborador.\" },\r\n                ]}\r\n              >\r\n                <Tooltip title=\"Selecione o nome do colaborador\">\r\n                  <Select\r\n                    allowClear\r\n                    showSearch\r\n                    placeholder=\"Selecione Colaborador\"\r\n                    //onSearch={handleSearch}\r\n                    optionFilterProp=\"children\"\r\n                    filterOption={(input, option) =>\r\n                      option?.children\r\n                        .toLowerCase()\r\n                        .indexOf(input.toLocaleLowerCase()) >= 0\r\n                    }\r\n                  >\r\n                    {names.map((value, index) => {\r\n                      //console.log(value, index);\r\n                      //console.log(value.name);\r\n                      return (\r\n                        <Option key={index} value={value.name}>\r\n                          {value.name}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                  </Select>\r\n                </Tooltip>\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item name={[\"registryEmployee\"]} label={\"Matrícula\"}>\r\n                <Input readOnly />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={20}>\r\n            <Col span={12}>\r\n              <Form.Item\r\n                name={[\"positionemployee\"]}\r\n                label={\"Cargo Colaborador\"}\r\n              >\r\n                <Input readOnly />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item name={[\"subsidiaryEmployee\"]} label={\"Filial\"}>\r\n                <Input readOnly />\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Row gutter={20}>\r\n            <Col span={12}>\r\n              <Form.Item name={[\"bossEmployee\"]} label={\"Superior Imediato\"}>\r\n                <Input readOnly />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={12}>\r\n              <Form.Item></Form.Item>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </fieldset>\r\n    </>\r\n  );\r\n}\r\n","import { Form, Table } from \"antd\";\r\nimport { EditOutlined } from \"@ant-design/icons\";\r\nimport \"../containersCommonFile/container.css\";\r\nimport { useState } from \"react\";\r\nimport { FieldData } from \"../containersCommonFile/containerInterface\";\r\n\r\nexport default function ContainerInfoVacation() {\r\n  const [fields, setFields] = useState<FieldData[]>([\r\n    { name: \"who\", value: \"\" },\r\n    { name: \"tableInfo\", value: {} },\r\n  ]);\r\n\r\n  interface iTable {\r\n    rowSelection?: {} | undefined;\r\n    scroll?: {} | undefined;\r\n    hasData?: boolean;\r\n    pagination?: {} | any;\r\n  }\r\n\r\n  const [tableConfig, setTableConfig] = useState<iTable>({\r\n    hasData: true,\r\n    rowSelection: undefined,\r\n  });\r\n\r\n  const convertStringDate = (dateString: string) => {\r\n    const strDate = dateString;\r\n    let dateStr: string = \"\";\r\n    if (strDate != undefined) {\r\n      dateStr =\r\n        strDate.substring(6, 10) +\r\n        \",\" +\r\n        strDate.substring(3, 5) +\r\n        \",\" +\r\n        strDate.substring(0, 2);\r\n    }\r\n    const dateRef = new Date(dateStr);\r\n    //console.log(dateStr);\r\n    //console.log(dateRef);\r\n\r\n    return dateRef;\r\n  };\r\n\r\n  const data = [\r\n    {\r\n      key: 1,\r\n      status: \"Definido\",\r\n      perAqIn: \"27/06/2022\",\r\n      perAqEnd: \"30/07/2022\",\r\n      dateIn: \"\",\r\n      dateEnd: \"\",\r\n      day: \"30\",\r\n      salary13: \"\",\r\n      allowence: \"\",\r\n      part: \"3\",\r\n      children: [\r\n        {\r\n          key: 11,\r\n          part: \"1\",\r\n          dateIn: \"04/09/2022\",\r\n          dateEnd: \"19/09/2022\",\r\n          salary13: \"Sim\",\r\n          allowence: \"\",\r\n          day: \"15\",\r\n        },\r\n        {\r\n          key: 12,\r\n          part: \"2\",\r\n          dateIn: \"01/10/2022\",\r\n          dateEnd: \"11/10/2022\",\r\n          day: \"10\",\r\n        },\r\n        {\r\n          key: 13,\r\n          part: \"3\",\r\n          dateIn: \"06/11/2022\",\r\n          dateEnd: \"11/11/2022\",\r\n          salary13: \"\",\r\n          allowence: \"Sim\",\r\n          day: \"5\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 2,\r\n      status: \"Aberto\",\r\n      perAqIn: \"28/06/2022\",\r\n      perAqEnd: \"30/07/2022\",\r\n      dateIn: \"\",\r\n      dateEnd: \"\",\r\n      day: \"30\",\r\n      salary13: \"\",\r\n      allowence: \"\",\r\n      part: \"\",\r\n    },\r\n  ];\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Situação\",\r\n      dataIndex: \"status\",\r\n      key: \"key\",\r\n    },\r\n    {\r\n      title: \"Período Aquisitivo Inicial\",\r\n      dataIndex: \"perAqIn\",\r\n      key: \"key\",\r\n    },\r\n    {\r\n      title: \"Período Aquisitivo Final\",\r\n      dataIndex: \"perAqEnd\",\r\n      key: \"key\",\r\n    },\r\n    {\r\n      title: \"Data Inicio\",\r\n      dataIndex: \"dateIn\",\r\n      key: \"key\",\r\n    },\r\n    {\r\n      title: \"Data Fim\",\r\n      dataIndex: \"dateEnd\",\r\n      key: \"key\",\r\n    },\r\n    {\r\n      title: \"Dias\",\r\n      dataIndex: \"day\",\r\n      key: \"key\",\r\n    },\r\n    {\r\n      title: \"13° Salário\",\r\n      dataIndex: \"salary13\",\r\n      key: \"key\",\r\n    },\r\n    {\r\n      title: \"Abono\",\r\n      dataIndex: \"allowence\",\r\n      key: \"key\",\r\n    },\r\n\r\n    {\r\n      title: \"Parcelas\",\r\n      dataIndex: \"part\",\r\n      key: \"key\",\r\n    },\r\n    {\r\n      title: \"Ação\",\r\n      key: \"action\",\r\n      render: (name) => {\r\n        const dateNow = new Date(Date.now());\r\n        const dateBegin = convertStringDate(name.perAqIn);\r\n        const dateEnd = convertStringDate(name.perAqEnd);\r\n        //console.log(dateNow > dateBegin && dateNow < dateEnd);\r\n        //console.log(dateBegin);\r\n        //console.log(dateEnd);\r\n        //console.log(name.part > 1);\r\n\r\n        if (dateNow > dateBegin && dateNow < dateEnd) {\r\n          if (name.part > 1) {\r\n            let dateRef = convertStringDate(name.children[0].dateIn);\r\n\r\n            dateRef.setDate(dateRef.getDate() - 60);\r\n            console.log(name.children[0].dateIn);\r\n            if (dateNow < dateRef) {\r\n              return (\r\n                <a>\r\n                  <EditOutlined />\r\n                </a>\r\n              );\r\n            } else {\r\n              return <a></a>;\r\n            }\r\n          } else if (name.part === 1) {\r\n            //console.log(\"teste\");\r\n            let dateRef = convertStringDate(name.dateIn);\r\n            dateRef.setDate(dateRef.getDate() - 60);\r\n            if (dateNow < dateRef) {\r\n              return (\r\n                <a>\r\n                  <EditOutlined />\r\n                </a>\r\n              );\r\n            } else {\r\n              return;\r\n              <a></a>;\r\n            }\r\n          } else {\r\n            return (\r\n              <a>\r\n                <EditOutlined />\r\n              </a>\r\n            );\r\n          }\r\n        }\r\n        return <a></a>;\r\n      },\r\n    },\r\n  ];\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const onRowSelection = (record, index) => {\r\n    //console.log(index);\r\n    //console.log(record);\r\n    //console.log(record.part);\r\n    form.setFieldsValue({ tableInfo: record });\r\n    form.submit();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Informações de Férias</legend>\r\n        <Form\r\n          name=\"formInfoVacation\"\r\n          labelAlign=\"left\"\r\n          form={form}\r\n          onFieldsChange={(_, allfields) => {\r\n            setFields(allfields);\r\n            //console.log(allfields);\r\n          }}\r\n        >\r\n          <Form.Item name={\"tableInfo\"}></Form.Item>\r\n\r\n          <Table\r\n            {...tableConfig}\r\n            pagination={false}\r\n            dataSource={data}\r\n            columns={columns}\r\n            onRow={(record, index) => {\r\n              return {\r\n                onClick: (event) => onRowSelection(record, index),\r\n              };\r\n            }}\r\n          />\r\n        </Form>\r\n      </fieldset>\r\n    </>\r\n  );\r\n}\r\n","import {\r\n  Input,\r\n  InputNumber,\r\n  Form,\r\n  Row,\r\n  Col,\r\n  Tooltip,\r\n  DatePicker,\r\n  notification,\r\n  Radio,\r\n  Space,\r\n  Checkbox,\r\n} from \"antd\";\r\nimport { useState, useEffect } from \"react\";\r\nimport \"../containersCommonFile/container.css\";\r\nimport { FieldData } from \"../containersCommonFile/containerInterface\";\r\nimport { WarningOutlined } from \"@ant-design/icons\";\r\nimport { sendRequest } from \"../../controlers/services/userRequest\";\r\n\r\n//let upVacation = 30;\r\n\r\nexport default function ContainerVacation(props: any) {\r\n  const [fieldsForm, setFieldsForm] = useState<FieldData[]>([\r\n    { name: \"periodEnd\", value: \"\" },\r\n    { name: \"unexcused\", value: \"\" },\r\n    { name: \"vacationDays\", value: \"\" },\r\n    { name: \"dateBeginVacation01\", value: \"\" },\r\n    { name: \"daysVacation01\", value: \"\" },\r\n    { name: \"dateEndVacation01\", value: \"\" },\r\n    { name: \"datePgto01\", value: \"\" },\r\n    { name: \"dateBeginVacation02\", value: \"\" },\r\n    { name: \"daysVacation02\", value: \"\" },\r\n    { name: \"dateEndVacation02\", value: \"\" },\r\n    { name: \"datePgto02\", value: \"\" },\r\n    { name: \"dateBeginVacation03\", value: \"\" },\r\n    { name: \"daysVacation03\", value: \"\" },\r\n    { name: \"dateEndVacation03\", value: \"\" },\r\n    { name: \"datePgto03\", value: \"\" },\r\n    { name: \"abonoPec\", value: \"\" },\r\n    { name: \"dtsal\", value: \"\" },\r\n  ]);\r\n\r\n  const [enaRow, setEnaRow] = useState({\r\n    enaRow01: true,\r\n    enaRow02: true,\r\n  });\r\n\r\n  const [abono, setAbono] = useState(false);\r\n\r\n  const [form] = Form.useForm();\r\n  const dayVacation = form.getFieldValue(\"vacationDays\");\r\n\r\n  const textData =\r\n    \"Informar a data de início das férias. Somente será permitido data de inicio após 60 dias da data de requisição. \";\r\n  const textDays =\r\n    \"Se parcelado, o número de dias não poderá ser menor que 5 e uma das parcelas deve ser de 14 dias\";\r\n\r\n  const warningNote = (description) => {\r\n    notification.open({\r\n      message: \"Atenção Erro no preenchimento\",\r\n      description: description,\r\n      icon: <WarningOutlined style={{ color: \"#FF0000\" }} />,\r\n      style: {\r\n        background: \"#bfcff7\",\r\n      },\r\n      duration: 5,\r\n    });\r\n  };\r\n\r\n  const dateEnd = (date, days) => {\r\n    let data = new Date(date);\r\n    data.setDate(data.getDate() + days);\r\n    //console.log(data.toLocaleDateString(\"en-GB\"));\r\n    return data.toLocaleDateString(\"en-GB\");\r\n  };\r\n\r\n  const datePgVacation = (dateBegin) => {\r\n    let firstDate = new Date(dateBegin);\r\n    const dayWeek = firstDate.getDay();\r\n    let dataPgo = new Date(dateBegin);\r\n    const num =\r\n      dayWeek === 1\r\n        ? 5\r\n        : dayWeek === 2\r\n        ? 6\r\n        : dayWeek === 3\r\n        ? 7\r\n        : dayWeek === 4\r\n        ? 8\r\n        : dayWeek === 5\r\n        ? 2\r\n        : dayWeek === 6\r\n        ? 3\r\n        : 0;\r\n    dataPgo.setDate(dataPgo.getDate() - num);\r\n    //console.log(dayWeek);\r\n    return dataPgo.toLocaleDateString(\"en-GB\");\r\n  };\r\n\r\n  //Função para validação do dia do mes\r\n  const validationDayDate = (dateBegin, dayVacation, chosenDate) => {\r\n    const data01 = form.getFieldValue(dateBegin);\r\n    const timeMin = Date.parse(data01._d);\r\n    const newDate = new Date(timeMin);\r\n    let refDate = new Date(\r\n      newDate.getFullYear(),\r\n      newDate.getMonth(),\r\n      newDate.getDate()\r\n    );\r\n    const newChosenDate = new Date(\r\n      chosenDate.getFullYear(),\r\n      chosenDate.getMonth(),\r\n      chosenDate.getDate()\r\n    );\r\n\r\n    const day = form.getFieldValue(dayVacation);\r\n    refDate.setDate(refDate.getDate() + parseInt(day));\r\n    //console.log(data01);\r\n    //console.log(refDate);\r\n    //console.log(newDate);\r\n    //console.log(chosenDate);\r\n\r\n    if (newChosenDate <= refDate) {\r\n      if (\r\n        newChosenDate.getMonth() === refDate.getMonth() &&\r\n        newChosenDate.getDate() < refDate.getDate()\r\n      ) {\r\n        const aviso =\r\n          \"Data não pode ser inferior ou igual a data da primeira parcela. \";\r\n        warningNote(aviso);\r\n      } else if (newChosenDate.getMonth() < refDate.getMonth()) {\r\n        const aviso =\r\n          \"Mês não pode ser inferior ao mês da primeira parcela. Favor corrigir.\";\r\n        warningNote(aviso);\r\n      }\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  //Função para validação de data\r\n  function validatorDate(value, name) {\r\n    if (value === \"\") {\r\n      return false;\r\n    } else {\r\n      const dayweek = value._d.getDay();\r\n\r\n      if (dayweek === 0) {\r\n        const aviso =\r\n          \"Dia de inicio da férias cai no domingo. Data não permitida. Favor corrigir\";\r\n        warningNote(aviso);\r\n      } else if (dayweek === 6) {\r\n        const aviso =\r\n          \"Dia de inicio da férias cai no sábado. Data não permitida. Favor corrigir\";\r\n        warningNote(aviso);\r\n      }\r\n      if (value) {\r\n        const chosenDate = new Date(value._d);\r\n        const today = new Date();\r\n        let diff = Math.abs(chosenDate.getTime() - today.getTime());\r\n        let dias = Math.ceil(diff / (1000 * 60 * 60 * 24));\r\n\r\n        if (dias < 60) {\r\n          const aviso =\r\n            \"Não é permitido escolher data abaixo de 60 dias após a data de requisição. Por favor verifique o preenchimento\";\r\n\r\n          warningNote(aviso);\r\n          return false;\r\n        } else if (name === \"dateBeginVacation02\") {\r\n          return validationDayDate(\r\n            \"dateBeginVacation01\",\r\n            \"daysVacation01\",\r\n            chosenDate\r\n          );\r\n        } else if (name === \"dateBeginVacation03\") {\r\n          return validationDayDate(\r\n            \"dateBeginVacation02\",\r\n            \"daysVacation02\",\r\n            chosenDate\r\n          );\r\n        } else {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  //Função para validação de dias\r\n  const validatorDays = (value, name) => {\r\n    let diffDays = 0;\r\n    const dayP1 = form.getFieldValue(\"daysVacation01\");\r\n    const dayP2 = form.getFieldValue(\"daysVacation02\");\r\n\r\n    props.set({\r\n      show01: true,\r\n      show02: true,\r\n    });\r\n\r\n    if (name === \"daysVacation01\") {\r\n      diffDays = dayVacation - value;\r\n\r\n      if (\r\n        (value >= 14 || diffDays >= 14) &&\r\n        value <= dayVacation - 5 &&\r\n        value >= 5\r\n      ) {\r\n        setEnaRow({\r\n          enaRow01: false,\r\n          enaRow02: true,\r\n        });\r\n        return diffDays;\r\n      } else if (dayP2 < 5 || dayP2 === undefined || diffDays < 5) {\r\n        setEnaRow({\r\n          enaRow01: true,\r\n          enaRow02: true,\r\n        });\r\n      }\r\n    } else if (name === \"daysVacation02\") {\r\n      diffDays = dayVacation - dayP1 - value;\r\n\r\n      if (diffDays < 5) {\r\n        setEnaRow({\r\n          enaRow01: false,\r\n          enaRow02: true,\r\n        });\r\n      } else if (\r\n        value >= 14 ||\r\n        diffDays === 14 ||\r\n        (value >= 5 && value <= dayVacation - dayP1 - 5)\r\n      ) {\r\n        setEnaRow({\r\n          enaRow01: false,\r\n          enaRow02: false,\r\n        });\r\n      }\r\n    } else {\r\n      setEnaRow({\r\n        enaRow01: true,\r\n        enaRow02: true,\r\n      });\r\n    }\r\n    return diffDays;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Seleção de Férias</legend>\r\n        <Form\r\n          name=\"formVacation\"\r\n          labelAlign=\"left\"\r\n          fields={fieldsForm}\r\n          form={form}\r\n          onFieldsChange={(_, allfields) => {\r\n            setFieldsForm(allfields);\r\n            //console.log(fieldsForm);\r\n          }}\r\n        >\r\n          <Col span={20}>\r\n            <Row justify=\"space-around\">\r\n              <Form.Item label={\"Fim do Período Aquisitivo\"} name={\"periodEnd\"}>\r\n                <Input style={{ width: \"120px\" }} readOnly />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name={\"unexcused\"}\r\n                label={\"Faltas não justificadas\"}\r\n                rules={[\r\n                  ({ setFieldsValue }) => ({\r\n                    validator(_, value) {\r\n                      if (value <= 5) {\r\n                        setFieldsValue({\r\n                          vacationDays: 30,\r\n                          daysVacation01: 30,\r\n                        });\r\n                      } else if (value > 5 && value <= 14) {\r\n                        setFieldsValue({\r\n                          vacationDays: 24,\r\n                          daysVacation01: 24,\r\n                        });\r\n                      } else if (value > 14 && value <= 23) {\r\n                        setFieldsValue({\r\n                          vacationDays: 18,\r\n                          daysVacation01: 18,\r\n                        });\r\n                      } else if (value > 23 && value <= 32) {\r\n                        setFieldsValue({\r\n                          vacationDays: 12,\r\n                          daysVacation01: 12,\r\n                        });\r\n                      } else {\r\n                        setFieldsValue({\r\n                          vacationDays: 0,\r\n                          daysVacation01: 0,\r\n                        });\r\n                      }\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input style={{ width: \"60px\" }} />\r\n              </Form.Item>\r\n\r\n              <Form.Item\r\n                name={\"vacationDays\"}\r\n                label={\"Dias Aquisitivos de Férias\"}\r\n                labelAlign=\"right\"\r\n              >\r\n                <Input style={{ width: \"60px\" }} readOnly />\r\n              </Form.Item>\r\n            </Row>\r\n            <Row>\r\n              <Form.Item\r\n                name={\"abonoPec\"}\r\n                rules={[\r\n                  ({ getFieldValue, setFieldsValue }) => ({\r\n                    validator(_, value) {\r\n                      //console.log(value);\r\n                      //console.log(abono);\r\n\r\n                      if (abono) {\r\n                        const third = (getFieldValue(\"vacationDays\") / 3) * 2;\r\n                        setFieldsValue({\r\n                          vacationDays: third,\r\n                          daysVacation01: third,\r\n                        });\r\n                      } else {\r\n                        const dayvac = (getFieldValue(\"vacationDays\") / 2) * 3;\r\n                        setFieldsValue({\r\n                          vacationDays: dayvac,\r\n                          daysVacation01: dayvac,\r\n                        });\r\n                      }\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Checkbox\r\n                  onChange={(value) => {\r\n                    setAbono(value.target.checked);\r\n                    //console.log(value);\r\n                  }}\r\n                  value={\"checked\"}\r\n                >\r\n                  Abono\r\n                </Checkbox>\r\n              </Form.Item>\r\n            </Row>\r\n          </Col>\r\n          <Row>\r\n            <Col span={20}>\r\n              <Row justify=\"space-around\">\r\n                <Tooltip placement=\"top\" title={textData}>\r\n                  <Form.Item\r\n                    label={\"Data Início\"}\r\n                    name={\"dateBeginVacation01\"}\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message:\r\n                          \"Obrigatório informar a data de inicio das férias.\",\r\n                      },\r\n                      ({ getFieldValue, setFieldsValue }) => ({\r\n                        validator(_, value) {\r\n                          const validDate = validatorDate(\r\n                            value,\r\n                            \"dateBeginVacation01\"\r\n                          );\r\n                          let datEnd = \"\";\r\n                          const datePgo = datePgVacation(value._d);\r\n                          //console.log(validDate);\r\n                          if (validDate) {\r\n                            const vacationDay = getFieldValue(\"daysVacation01\");\r\n\r\n                            if (vacationDay) {\r\n                              datEnd = dateEnd(\r\n                                Date.parse(value._d),\r\n                                vacationDay\r\n                              );\r\n                            }\r\n                            //console.log(datEnd);\r\n                            //console.log(value._d);\r\n                            setFieldsValue({\r\n                              dateEndVacation01: datEnd,\r\n                              datePgto01: datePgo,\r\n                            });\r\n                            return Promise.resolve(\r\n                              setFieldsValue({\r\n                                dateEndVacation01: datEnd,\r\n                                datePgto01: datePgo,\r\n                              })\r\n                            );\r\n                          } else {\r\n                            return Promise.reject(\r\n                              new Error(\r\n                                \"Data negada. Favor digitar uma data correta\"\r\n                              )\r\n                            );\r\n                          }\r\n                        },\r\n                      }),\r\n                    ]}\r\n                  >\r\n                    <DatePicker\r\n                      style={{ width: \"120px\" }}\r\n                      allowClear\r\n                      format=\"DD/MM/YYYY\"\r\n                    />\r\n                  </Form.Item>\r\n                </Tooltip>\r\n\r\n                <Tooltip placement=\"top\" title={textDays}>\r\n                  <Form.Item\r\n                    label={\"Qto Dias\"}\r\n                    name={\"daysVacation01\"}\r\n                    rules={[\r\n                      {\r\n                        required: true,\r\n                        message: \"Favor informar o número de dias de férias.\",\r\n                      },\r\n\r\n                      ({ getFieldValue, setFieldsValue, setFields }) => ({\r\n                        validator(_, value) {\r\n                          const testDate = getFieldValue(\"dateBeginVacation01\");\r\n\r\n                          const validDate = validatorDate(\r\n                            testDate,\r\n                            \"dateBeginVacation01\"\r\n                          );\r\n                          const totalDays = getFieldValue(\"vacationDays\");\r\n\r\n                          const datePgo = datePgVacation(testDate._d);\r\n\r\n                          if (testDate.length === 0) {\r\n                            setFields([\r\n                              {\r\n                                name: \"daysVacation01\",\r\n                                value: totalDays,\r\n                              },\r\n                            ]);\r\n                            return Promise.reject(\r\n                              new Error(\r\n                                \"Favor primeiro selecionar a data de inicio das férias corretamente.\"\r\n                              )\r\n                            );\r\n                          } else if (totalDays < 19) {\r\n                            const aviso =\r\n                              \"Numero de dias de férias insuficientes para parcelar férias. Valor será em cota única \";\r\n                            warningNote(aviso);\r\n                            setFieldsValue({\r\n                              daysVacation01: totalDays,\r\n                            });\r\n                            return Promise.reject(\r\n                              new Error(\"Não é permitido parcelar\")\r\n                            );\r\n                          } else {\r\n                            if (validDate) {\r\n                              if (value < totalDays && value > totalDays - 2) {\r\n                                //console.log(\"Primeiro Click\");\r\n                                const datEndP1 = dateEnd(\r\n                                  Date.parse(testDate._d),\r\n                                  totalDays - 5\r\n                                );\r\n\r\n                                const diffDays = validatorDays(\r\n                                  totalDays - 5,\r\n                                  \"daysVacation01\"\r\n                                );\r\n\r\n                                setFieldsValue({\r\n                                  daysVacation01: totalDays - 5,\r\n                                  dateEndVacation01: datEndP1,\r\n                                  datePgto01: datePgo,\r\n                                  daysVacation02: diffDays,\r\n                                  dateEndVacation02: \"\",\r\n                                  dateBeginVacation02: \"\",\r\n                                  datePgto02: \"\",\r\n                                  daysVacation03: \"\",\r\n                                  dateEndVacation03: \"\",\r\n                                  dateBeginVacation03: \"\",\r\n                                  datePgto03: \"\",\r\n                                });\r\n\r\n                                /* Se P2 e P3 igual 5 não permite que P1 aceite incrementar até 30 */\r\n                              } else if (\r\n                                getFieldValue(\"daysVacation02\") < 6 &&\r\n                                getFieldValue(\"daysVacation01\") >=\r\n                                  getFieldValue(\"vacationDays\") - 10 &&\r\n                                getFieldValue(\"daysVacation03\") === 5\r\n                              ) {\r\n                                console.log(\r\n                                  \"Erro: Se P2 e P3 igual 5 não permite que P1 aceite incrementar até 30 \"\r\n                                );\r\n                                return Promise.reject(\r\n                                  new Error(\"Máximo valor permitido\")\r\n                                );\r\n                                /* Se P3=0 e P2<5 e P1>25  */\r\n                              } else if (\r\n                                getFieldValue(\"daysVacation02\") <= 5 &&\r\n                                getFieldValue(\"daysVacation01\") > totalDays - 6\r\n                              ) {\r\n                                const datEndP1 = dateEnd(\r\n                                  Date.parse(testDate._d),\r\n                                  totalDays\r\n                                );\r\n\r\n                                setFieldsValue({\r\n                                  daysVacation01: totalDays,\r\n                                  dateEndVacation01: datEndP1,\r\n                                  datePgto01: datePgo,\r\n                                  daysVacation02: \"\",\r\n                                  dateEndVacation02: \"\",\r\n                                  dateBeginVacation02: \"\",\r\n                                  datePgto02: \"\",\r\n                                });\r\n\r\n                                validatorDays(value, \"daysVacation01\");\r\n                              } else {\r\n                                const datEndP1 = dateEnd(\r\n                                  Date.parse(testDate._d),\r\n                                  value\r\n                                );\r\n\r\n                                /* dataInP2=\"\" e diasP2=0 */\r\n                                if (\r\n                                  getFieldValue(\"dateBeginVacation02\") === \"\" &&\r\n                                  getFieldValue(\"daysVacation02\") === \"\"\r\n                                ) {\r\n                                  const diffDays = validatorDays(\r\n                                    value,\r\n                                    \"daysVacation01\"\r\n                                  );\r\n\r\n                                  setFieldsValue({\r\n                                    dateEndVacation01: datEndP1,\r\n                                    datePgto01: datePgo,\r\n                                    daysVacation02: diffDays,\r\n                                    dateEndVacation02: \"\",\r\n                                    dateBeginVacation02: \"\",\r\n                                    datePgto02: \"\",\r\n                                    daysVacation03: \"\",\r\n                                    dateEndVacation03: \"\",\r\n                                    dateBeginVacation03: \"\",\r\n                                    datePgto03: \"\",\r\n                                  });\r\n                                } else if (\r\n                                  getFieldValue(\"daysVacation02\") !== \"\"\r\n                                ) {\r\n                                  const dateBegin02 = getFieldValue(\r\n                                    \"dateBeginVacation02\"\r\n                                  );\r\n\r\n                                  const datePgo2 = datePgVacation(\r\n                                    dateBegin02._d\r\n                                  );\r\n\r\n                                  const diasP2 =\r\n                                    totalDays -\r\n                                    getFieldValue(\"daysVacation01\") -\r\n                                    getFieldValue(\"daysVacation03\");\r\n                                  /* Existe data parcela 2 */\r\n                                  if (dateBegin02 !== \"\") {\r\n                                    const datEndP2 = dateEnd(\r\n                                      Date.parse(dateBegin02._d),\r\n                                      value\r\n                                    );\r\n                                    /* Existe data parcela 2 e diasP3*/\r\n                                    if (\r\n                                      getFieldValue(\"daysVacation03\") !== \"\"\r\n                                    ) {\r\n                                      const daysVac03 =\r\n                                        getFieldValue(\"daysVacation03\");\r\n\r\n                                      const dataInP3 =\r\n                                        getFieldValue(\"dateBeginVacation03\") !==\r\n                                        \"\"\r\n                                          ? getFieldValue(\"dateBeginVacation03\")\r\n                                          : \"\";\r\n\r\n                                      const datePgo3 = datePgVacation(\r\n                                        dataInP3._d\r\n                                      );\r\n\r\n                                      /* Existe dataP2 e dataP3 */\r\n                                      if (dataInP3 !== \"\") {\r\n                                        const datEndP3 = dateEnd(\r\n                                          Date.parse(dataInP3._d),\r\n                                          daysVac03\r\n                                        );\r\n\r\n                                        setFieldsValue({\r\n                                          dateEndVacation01: datEndP1,\r\n                                          datePgto01: datePgo,\r\n                                          daysVacation02: diasP2,\r\n                                          dateEndVacation02: datEndP2,\r\n                                          dateBeginVacation02: dateBegin02,\r\n                                          datePgto02: datePgo2,\r\n                                          daysVacation03: daysVac03,\r\n                                          dateEndVacation03: datEndP3,\r\n                                          dateBeginVacation03: dataInP3,\r\n                                          datePgto03: datePgo3,\r\n                                        });\r\n                                      } else {\r\n                                        setFieldsValue({\r\n                                          dateEndVacation01: datEndP1,\r\n                                          datePgto01: datePgo,\r\n                                          daysVacation02: diasP2,\r\n                                          dateEndVacation02: datEndP2,\r\n                                          dateBeginVacation02: dateBegin02,\r\n                                          datePgto02: datePgo2,\r\n                                          daysVacation03: daysVac03,\r\n                                          dateEndVacation03: \"\",\r\n                                          dateBeginVacation03: \"\",\r\n                                          datePgto03: \"\",\r\n                                        });\r\n                                        validatorDays(diasP2, \"daysVacation02\");\r\n                                      }\r\n                                      /* Existe data parcela 2 e diasP3=0 */\r\n                                    } else if (\r\n                                      getFieldValue(\"daysVacation03\") === \"\"\r\n                                    ) {\r\n                                      setFieldsValue({\r\n                                        dateEndVacation01: datEndP1,\r\n                                        datePgto01: datePgo,\r\n                                        daysVacation02: diasP2,\r\n                                        dateEndVacation02: datEndP2,\r\n                                        dateBeginVacation02: dateBegin02,\r\n                                        datePgto02: datePgo2,\r\n                                        daysVacation03: \"\",\r\n                                        dateEndVacation03: \"\",\r\n                                        dateBeginVacation03: \"\",\r\n                                        datePgto03: \"\",\r\n                                      });\r\n                                    }\r\n                                    /* Sem dataP2 */\r\n                                  } else {\r\n                                    const diffDays = validatorDays(\r\n                                      value,\r\n                                      \"daysVacation01\"\r\n                                    );\r\n\r\n                                    setFieldsValue({\r\n                                      dateEndVacation01: datEndP1,\r\n                                      datePgto01: datePgo,\r\n                                      daysVacation02: diffDays,\r\n                                      dateEndVacation02: \"\",\r\n                                      datePgto02: \"\",\r\n                                      dateBeginVacation02: \"\",\r\n                                      daysVacation03: \"\",\r\n                                      dateEndVacation03: \"\",\r\n                                      datePgto03: \"\",\r\n                                      dateBeginVacation03: \"\",\r\n                                    });\r\n                                  }\r\n\r\n                                  return Promise.resolve();\r\n                                }\r\n                              }\r\n                            } else {\r\n                              return Promise.reject(\r\n                                new Error(\"Data está invalida. Favor corrigir\")\r\n                              );\r\n                            }\r\n                          }\r\n                        },\r\n                      }),\r\n                    ]}\r\n                  >\r\n                    <InputNumber\r\n                      min={5}\r\n                      max={\r\n                        form.getFieldValue(\"daysVacation02\") < 6 &&\r\n                        form.getFieldValue(\"daysVacation03\") === 5\r\n                          ? form.getFieldValue(\"vacationDays\") -\r\n                            form.getFieldValue(\"daysVacation02\") -\r\n                            form.getFieldValue(\"daysVacation03\")\r\n                          : form.getFieldValue(\"vacationDays\")\r\n                      }\r\n                      style={{ width: \"60px\" }}\r\n                    />\r\n                  </Form.Item>\r\n                </Tooltip>\r\n                <Form.Item label={\"Data Fim\"} name={\"dateEndVacation01\"}>\r\n                  <Input style={{ width: \"120px\" }} readOnly />\r\n                </Form.Item>\r\n                <Form.Item label={\"Data Pgto\"} name={\"datePgto01\"}>\r\n                  <Input style={{ width: \"120px\" }} readOnly />\r\n                </Form.Item>\r\n              </Row>\r\n\r\n              <div\r\n                hidden={!enaRow.enaRow01 || !props.ena.show01 ? false : true}\r\n              >\r\n                <Row justify=\"space-around\">\r\n                  <Tooltip placement=\"top\" title={textData}>\r\n                    <Form.Item\r\n                      label={\"Data Início\"}\r\n                      name={\"dateBeginVacation02\"}\r\n                      rules={[\r\n                        {\r\n                          required: true,\r\n                          message:\r\n                            \"Obrigatório informar a data de inicio das férias.\",\r\n                        },\r\n                        ({ getFieldValue, setFieldsValue }) => ({\r\n                          validator(_, value) {\r\n                            const validDate = validatorDate(\r\n                              value,\r\n                              \"dateBeginVacation02\"\r\n                            );\r\n\r\n                            let datEnd = \"\";\r\n                            const datePgo2 = datePgVacation(value._d);\r\n                            if (\r\n                              getFieldValue(\"daysVacation01\") < 14 &&\r\n                              getFieldValue(\"daysVacation02\") < 14 &&\r\n                              getFieldValue(\"daysVacation03\") < 14\r\n                            ) {\r\n                              const aviso =\r\n                                \"Uma das parcela tem que maior ou igual a 14 dias. Favor corrigir \";\r\n                              warningNote(aviso);\r\n                              return Promise.reject(\r\n                                new Error(\"Parcelas não permitidas\")\r\n                              );\r\n                            } else {\r\n                              if (validDate) {\r\n                                const vacationDay =\r\n                                  getFieldValue(\"daysVacation02\");\r\n\r\n                                if (vacationDay) {\r\n                                  datEnd = dateEnd(\r\n                                    Date.parse(value._d),\r\n                                    vacationDay\r\n                                  );\r\n                                }\r\n                                setFieldsValue({\r\n                                  dateEndVacation02: datEnd,\r\n                                  datePgto02: datePgo2,\r\n                                });\r\n                                return Promise.resolve(\r\n                                  setFieldsValue({\r\n                                    dateEndVacation02: datEnd,\r\n                                    datePgto02: datePgo2,\r\n                                  })\r\n                                );\r\n                              } else {\r\n                                return Promise.reject(\r\n                                  new Error(\r\n                                    \"Data negada. Favor digitar uma data correta\"\r\n                                  )\r\n                                );\r\n                              }\r\n                            }\r\n                          },\r\n                        }),\r\n                      ]}\r\n                    >\r\n                      <DatePicker\r\n                        style={{ width: \"120px\" }}\r\n                        allowClear\r\n                        format=\"DD/MM/YYYY\"\r\n                      />\r\n                    </Form.Item>\r\n                  </Tooltip>\r\n                  <Tooltip placement=\"top\" title={textDays}>\r\n                    <Form.Item\r\n                      label={\"Qto Dias\"}\r\n                      name={\"daysVacation02\"}\r\n                      rules={[\r\n                        {\r\n                          required: true,\r\n                          message: \"Favor informar o número de dias de férias.\",\r\n                        },\r\n\r\n                        ({ getFieldValue, setFieldsValue, setFields }) => ({\r\n                          validator(_, value) {\r\n                            const testDate = getFieldValue(\r\n                              \"dateBeginVacation02\"\r\n                            );\r\n\r\n                            const validDate = validatorDate(\r\n                              testDate,\r\n                              \"dateBeginVacation02\"\r\n                            );\r\n                            const totalDays = getFieldValue(\"vacationDays\");\r\n\r\n                            const datePgo2 = datePgVacation(testDate._d);\r\n\r\n                            if (totalDays < 25) {\r\n                              const aviso =\r\n                                \"Numero de dias de férias insuficientes para parcelar as férias em 3 vezes. \";\r\n                              warningNote(aviso);\r\n                              setFieldsValue({\r\n                                daysVacation02:\r\n                                  totalDays - getFieldValue(\"daysVacation01\"),\r\n                              });\r\n                              return Promise.reject(\r\n                                new Error(\"Não é permitido parcelar\")\r\n                              );\r\n                            } else {\r\n                              if (testDate._d) {\r\n                                if (validDate) {\r\n                                  if (\r\n                                    value <=\r\n                                      totalDays -\r\n                                        getFieldValue(\"daysVacation01\") &&\r\n                                    value >=\r\n                                      totalDays -\r\n                                        getFieldValue(\"daysVacation01\") -\r\n                                        2\r\n                                  ) {\r\n                                    const datEndP2 = dateEnd(\r\n                                      Date.parse(testDate._d),\r\n                                      value - 4\r\n                                    );\r\n\r\n                                    setFields([\r\n                                      {\r\n                                        name: \"daysVacation02\",\r\n                                        value: value - 4,\r\n                                      },\r\n                                      {\r\n                                        name: \"dateEndVacation02\",\r\n                                        value: datEndP2,\r\n                                      },\r\n                                      {\r\n                                        name: \"dateBeginVacation03\",\r\n                                        value: \"\",\r\n                                      },\r\n                                      { name: \"daysVacation03\", value: 5 },\r\n                                      { name: \"dateEndVacation03\", value: \"\" },\r\n                                    ]);\r\n\r\n                                    validatorDays(value - 4, \"daysVacation02\");\r\n                                    /* caso reduza valor P3<5 e P2 aumenta */\r\n                                  } else if (\r\n                                    getFieldValue(\"daysVacation03\") < 6 &&\r\n                                    getFieldValue(\"daysVacation02\") >\r\n                                      totalDays -\r\n                                        getFieldValue(\"daysVacation01\") -\r\n                                        5\r\n                                  ) {\r\n                                    const daysVac02 =\r\n                                      getFieldValue(\"vacationDays\") -\r\n                                      getFieldValue(\"daysVacation01\");\r\n\r\n                                    const datEndP2 = dateEnd(\r\n                                      Date.parse(testDate._d),\r\n                                      daysVac02\r\n                                    );\r\n\r\n                                    setFieldsValue({\r\n                                      daysVacation02: daysVac02,\r\n                                      dateEndVacation02: datEndP2,\r\n                                      datePgto02: datePgo2,\r\n                                      daysVacation03: \"\",\r\n                                      dateEndVacation03: \"\",\r\n                                      dateBeguinVacation03: \"\",\r\n                                      datePgto03: \"\",\r\n                                    });\r\n\r\n                                    validatorDays(daysVac02, \"daysVacation02\");\r\n                                  } else if (\r\n                                    getFieldValue(\"daysVacation02\") < 6 &&\r\n                                    getFieldValue(\"daysVacation03\") < 6\r\n                                  ) {\r\n                                    return Promise.reject();\r\n                                    /*Se ok  */\r\n                                  } else {\r\n                                    const diffDays = validatorDays(\r\n                                      value,\r\n                                      \"daysVacation02\"\r\n                                    );\r\n                                    const datEndP2 = dateEnd(\r\n                                      Date.parse(testDate._d),\r\n                                      value\r\n                                    );\r\n\r\n                                    /* Com o valor da data de inicio */\r\n                                    if (\r\n                                      getFieldValue(\"dateBeginVacation03\") ===\r\n                                        \"\" ||\r\n                                      undefined\r\n                                    ) {\r\n                                      setFieldsValue({\r\n                                        dateEndVacation02: datEndP2,\r\n                                        datePgto02: datePgo2,\r\n                                        daysVacation03: diffDays,\r\n                                        dateEndVacation03: \"\",\r\n                                        dateBeguinVacation03: \"\",\r\n                                        datePgto03: \"\",\r\n                                      });\r\n                                    } else {\r\n                                      const datEndP3 = dateEnd(\r\n                                        Date.parse(\r\n                                          getFieldValue(\"dateBeginVacation03\")\r\n                                            ._d\r\n                                        ),\r\n                                        diffDays\r\n                                      );\r\n\r\n                                      const datePgo3 = datePgVacation(\r\n                                        getFieldValue(\"dateBeginVacation03\")._d\r\n                                      );\r\n\r\n                                      setFieldsValue({\r\n                                        dateEndVacation02: datEndP2,\r\n                                        datePgto02: datePgo2,\r\n                                        daysVacation03: diffDays,\r\n                                        dateEndVacation03: datEndP3,\r\n                                        datePgto03: datePgo3,\r\n                                      });\r\n                                    }\r\n\r\n                                    return Promise.resolve();\r\n                                  }\r\n                                } else {\r\n                                  return Promise.reject(\r\n                                    new Error(\r\n                                      \"Data está invalida. Favor corrigir\"\r\n                                    )\r\n                                  );\r\n                                }\r\n                              } else {\r\n                                return Promise.reject(\r\n                                  new Error(\r\n                                    \"Favor primeiro selecionar a data de inicio das férias corretamente.\"\r\n                                  )\r\n                                );\r\n                              }\r\n                            }\r\n                          },\r\n                        }),\r\n                      ]}\r\n                    >\r\n                      <InputNumber\r\n                        min={5}\r\n                        max={\r\n                          form.getFieldValue(\"vacationDays\") -\r\n                          form.getFieldValue(\"daysVacation01\")\r\n                        }\r\n                        style={{ width: \"60px\" }}\r\n                      />\r\n                    </Form.Item>\r\n                  </Tooltip>\r\n                  <Form.Item label={\"Data Fim\"} name={\"dateEndVacation02\"}>\r\n                    <Input style={{ width: \"120px\" }} readOnly />\r\n                  </Form.Item>\r\n                  <Form.Item label={\"Data Pgto\"} name={\"datePgto02\"}>\r\n                    <Input style={{ width: \"120px\" }} readOnly />\r\n                  </Form.Item>\r\n                </Row>\r\n              </div>\r\n              <div\r\n                hidden={!enaRow.enaRow02 || !props.ena.show02 ? false : true}\r\n              >\r\n                <Row justify=\"space-around\">\r\n                  <Tooltip placement=\"top\" title={textData}>\r\n                    <Form.Item\r\n                      label={\"Data Início\"}\r\n                      name={\"dateBeginVacation03\"}\r\n                      rules={[\r\n                        {\r\n                          required: true,\r\n                          message:\r\n                            \"Obrigatório informar a data de inicio das férias.\",\r\n                        },\r\n                        ({ getFieldValue, setFieldsValue }) => ({\r\n                          validator(_, value) {\r\n                            const validDate = validatorDate(\r\n                              value,\r\n                              \"dateBeginVacation03\"\r\n                            );\r\n                            let datEnd = \"\";\r\n                            //console.log(validDate);\r\n                            const datePgo3 = datePgVacation(value._d);\r\n                            if (\r\n                              getFieldValue(\"daysVacation01\") < 14 &&\r\n                              getFieldValue(\"daysVacation02\") < 14 &&\r\n                              getFieldValue(\"daysVacation03\") < 14\r\n                            ) {\r\n                              const aviso =\r\n                                \"Uma das parcela tem que maior ou igual a 14 dias. Favor corrigir \";\r\n                              warningNote(aviso);\r\n                              return Promise.reject(\r\n                                new Error(\"Parcelas não permitidas\")\r\n                              );\r\n                            } else {\r\n                              if (validDate) {\r\n                                const vacationDay =\r\n                                  getFieldValue(\"daysVacation03\");\r\n\r\n                                if (vacationDay) {\r\n                                  datEnd = dateEnd(\r\n                                    Date.parse(value._d),\r\n                                    vacationDay\r\n                                  );\r\n                                }\r\n\r\n                                setFieldsValue({\r\n                                  dateEndVacation03: datEnd,\r\n                                  datePgto03: datePgo3,\r\n                                });\r\n                                return Promise.resolve(\r\n                                  setFieldsValue({\r\n                                    dateEndVacation03: datEnd,\r\n                                    datePgto03: datePgo3,\r\n                                  })\r\n                                );\r\n                              } else {\r\n                                return Promise.reject(\r\n                                  new Error(\r\n                                    \"Data negada. Favor digitar uma data correta\"\r\n                                  )\r\n                                );\r\n                              }\r\n                            }\r\n                          },\r\n                        }),\r\n                      ]}\r\n                    >\r\n                      <DatePicker\r\n                        style={{ width: \"120px\" }}\r\n                        allowClear\r\n                        format=\"DD/MM/YYYY\"\r\n                      />\r\n                    </Form.Item>\r\n                  </Tooltip>\r\n                  <Form.Item label={\"Qto Dias\"} name={\"daysVacation03\"}>\r\n                    <InputNumber style={{ width: \"60px\" }} readOnly />\r\n                  </Form.Item>\r\n                  <Form.Item label={\"Data Fim\"} name={\"dateEndVacation03\"}>\r\n                    <Input style={{ width: \"120px\" }} readOnly />\r\n                  </Form.Item>\r\n                  <Form.Item label={\"Data Pgto\"} name={\"datePgto03\"}>\r\n                    <Input style={{ width: \"120px\" }} readOnly />\r\n                  </Form.Item>\r\n                </Row>\r\n              </div>\r\n            </Col>\r\n            <Col span={4}>\r\n              <Row>\r\n                <Form.Item name={\"dtsal\"} style={{ marginTop: \"-55px\" }}>\r\n                  <Radio.Group>\r\n                    <Space\r\n                      direction=\"vertical\"\r\n                      size={35}\r\n                      style={{ display: \"flex\", marginTop: \"-55px\" }}\r\n                    >\r\n                      <Radio value={0} checked>\r\n                        Não\r\n                      </Radio>\r\n                      <Radio value={1}>13 Sal</Radio>\r\n                      <span\r\n                        hidden={\r\n                          !enaRow.enaRow01 || !props.ena.show01 ? false : true\r\n                        }\r\n                      >\r\n                        <Radio value={2}>13 Sal</Radio>\r\n                      </span>\r\n                      <span\r\n                        hidden={\r\n                          !enaRow.enaRow02 || !props.ena.show02 ? false : true\r\n                        }\r\n                      >\r\n                        <Radio value={3}>13 Sal</Radio>\r\n                      </span>\r\n                    </Space>\r\n                  </Radio.Group>\r\n                </Form.Item>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </fieldset>\r\n    </>\r\n  );\r\n}\r\n","import { Input, Form, Table, Button, Row, Col, Tooltip } from \"antd\";\r\nimport \"./container.css\";\r\nimport { useState } from \"react\";\r\nimport { FieldData } from \"./containerInterface\";\r\n\r\nfunction ContainerObservation() {\r\n  const [fields, setFields] = useState<FieldData[]>([\r\n    { name: \"approver\", value: \"\" },\r\n  ]);\r\n\r\n  const [dataSource, setDataSource] = useState([\r\n    {\r\n      key: \"\",\r\n      usu: \"\",\r\n      dateTime: \"\",\r\n      role: \"\",\r\n      description: \"\",\r\n    },\r\n  ]);\r\n\r\n  const [count, setCount] = useState(0);\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Nome\",\r\n      dataIndex: \"usu\",\r\n      key: \"key\",\r\n      width: \"20%\",\r\n    },\r\n    {\r\n      title: \"Cargo\",\r\n      dataIndex: \"office\",\r\n      key: \"key\",\r\n      width: \"20%\",\r\n    },\r\n    {\r\n      title: \"Data/Hora\",\r\n      dataIndex: \"dateTime\",\r\n      key: \"key\",\r\n      width: \"20%\",\r\n    },\r\n    {\r\n      title: \"Papel\",\r\n      dataIndex: \"paper\",\r\n      key: \"key\",\r\n      width: \"20%\",\r\n    },\r\n    {\r\n      title: \"Observações\",\r\n      dataIndex: \"description\",\r\n      key: \"key\",\r\n      width: \"20%\",\r\n    },\r\n  ];\r\n\r\n  interface obsItem {\r\n    key: string;\r\n    usu: string;\r\n    dateTime: string;\r\n    role: string;\r\n    description: string;\r\n  }\r\n\r\n  const onFinish = (values: string) => {\r\n    const now = new Date();\r\n    const newObs: obsItem = {\r\n      key: count.toString(),\r\n      usu: values[\"approver\"],\r\n      dateTime: now.toLocaleString(\"en-GB\", { timeZone: \"UTC\" }),\r\n      role: \"\",\r\n      description: values[\"descriptionApp\"],\r\n    };\r\n\r\n    setCount((prev) => prev + 1);\r\n    setDataSource((prev) => {\r\n      return [newObs, ...prev];\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <fieldset>\r\n        <legend>Observações</legend>\r\n        <Form\r\n          fields={fields}\r\n          onFieldsChange={(_, allFields) => {}}\r\n          onFinish={onFinish}\r\n        >\r\n          <Row gutter={20}>\r\n            <Col span={20}>\r\n              <Form.Item\r\n                name={\"approver\"}\r\n                label={\"Aprovador\"}\r\n                labelAlign=\"left\"\r\n                labelCol={{ span: 4 }}\r\n                wrapperCol={{ span: 10 }}\r\n              >\r\n                <Input style={{ marginLeft: \"25px\" }} />\r\n              </Form.Item>\r\n            </Col>\r\n            <Col span={4}>\r\n              <Form.Item labelAlign=\"right\">\r\n                <Button block type=\"primary\" htmlType=\"submit\">\r\n                  Gravar\r\n                </Button>\r\n              </Form.Item>\r\n            </Col>\r\n          </Row>\r\n          <Tooltip title=\"Campo opcional para acrescentar observações. Após digitar pressionar tecla 'Gravar'.\">\r\n            <Form.Item\r\n              name={\"descriptionApp\"}\r\n              label={\"Observações\"}\r\n              labelAlign=\"left\"\r\n              labelCol={{ span: 4 }}\r\n            >\r\n              <Input.TextArea showCount maxLength={150} />\r\n            </Form.Item>\r\n          </Tooltip>\r\n          <Form.Item label={\"Histórico\"} labelAlign=\"left\">\r\n            <Table dataSource={dataSource} columns={columns}></Table>\r\n          </Form.Item>\r\n        </Form>\r\n      </fieldset>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ContainerObservation;\r\n","import {\r\n  ContainerIdentify,\r\n  DataToRequest,\r\n} from \"../containers/containersCommonFile/containerIdentify\";\r\nimport ContainerEmployee from \"../containers/containersCommonFile/containeEmployee\";\r\nimport ContainerInfoVacation from \"../containers/containersVacation/containerInfoVacation\";\r\nimport ContainerVacation from \"../containers/containersVacation/containerVacation\";\r\nimport ContainerObservation from \"../containers/containersCommonFile/containerObservation\";\r\nimport { Form } from \"antd\";\r\nimport moment from \"moment\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function FormPageVacation() {\r\n  const [showRow, setShowRow] = useState({\r\n    show01: true,\r\n    show02: true,\r\n  });\r\n\r\n  const [employee, setEmployee] = useState(true);\r\n\r\n  //console.log(subordinate);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Form.Provider\r\n          onFormFinish={(name, { values, forms }) => {\r\n            //console.log(name);\r\n            //console.log(values);\r\n            //console.log(values.who);\r\n            //console.log(forms);\r\n            //const { formVacation } = forms;\r\n            if (name === \"formIdentify\" && values.who === \"employeeVacation\") {\r\n              setEmployee(false);\r\n            } else {\r\n              setEmployee(true);\r\n            }\r\n          }}\r\n        >\r\n          <ContainerIdentify />\r\n          <span hidden={employee}>\r\n            <ContainerEmployee />\r\n          </span>\r\n        </Form.Provider>\r\n        <Form.Provider\r\n          onFormFinish={(name, { values, forms }) => {\r\n            //console.log(name);\r\n            //console.log(values);\r\n            //console.log(forms);\r\n            const { formVacation } = forms;\r\n            const element = document.querySelector(\"span.ant-checkbox\");\r\n\r\n            if (values.tableInfo.status === \"Definido\") {\r\n              for (let i = 0; i < values.tableInfo.part; i++) {\r\n                formVacation.setFields([\r\n                  {\r\n                    name: \"dateBeginVacation0\" + (i + 1),\r\n                    value: moment(\r\n                      values.tableInfo.children[i].dateIn,\r\n                      \"DD/MM/YYYY\"\r\n                    ),\r\n                  },\r\n                  {\r\n                    name: \"daysVacation0\" + (i + 1),\r\n                    value: values.tableInfo.children[i].day,\r\n                  },\r\n                  {\r\n                    name: \"dateEndVacation0\" + (i + 1),\r\n                    value: values.tableInfo.children[i].dateEnd,\r\n                  },\r\n                ]);\r\n              }\r\n            } else if (values.tableInfo.status === \"Aberto\") {\r\n              formVacation.setFields([\r\n                {\r\n                  name: \"vacationDays\",\r\n                  value: values.tableInfo.day,\r\n                },\r\n                {\r\n                  name: \"daysVacation01\",\r\n                  value: values.tableInfo.day,\r\n                },\r\n                {\r\n                  name: \"periodEnd\",\r\n                  value: values.tableInfo.perAqEnd,\r\n                },\r\n              ]);\r\n\r\n              element.classList.remove(\"ant-checkbox-checked\");\r\n            }\r\n            formVacation.setFields([\r\n              {\r\n                name: \"dateBeginVacation01\",\r\n                value: moment(\r\n                  values.tableInfo.children[0].dateIn,\r\n                  \"DD/MM/YYYY\"\r\n                ),\r\n              },\r\n              {\r\n                name: \"periodEnd\",\r\n                value: values.tableInfo.perAqEnd,\r\n              },\r\n              {\r\n                name: \"daysVacation01\",\r\n                value: values.tableInfo.children[0].day,\r\n              },\r\n              {\r\n                name: \"dateEndVacation01\",\r\n                value: values.tableInfo.children[0].dateEnd,\r\n              },\r\n              {\r\n                name: \"dateBeginVacation02\",\r\n                value: moment(\r\n                  values.tableInfo.children[1].dateIn,\r\n                  \"DD/MM/YYYY\"\r\n                ),\r\n              },\r\n              {\r\n                name: \"daysVacation02\",\r\n                value: values.tableInfo.children[1].day,\r\n              },\r\n              {\r\n                name: \"dateEndVacation02\",\r\n                value: values.tableInfo.children[1].dateEnd,\r\n              },\r\n              {\r\n                name: \"dateBeginVacation03\",\r\n                value: moment(\r\n                  values.tableInfo.children[2].dateIn,\r\n                  \"DD/MM/YYYY\"\r\n                ),\r\n              },\r\n              {\r\n                name: \"daysVacation03\",\r\n                value: values.tableInfo.children[2].day,\r\n              },\r\n              {\r\n                name: \"dateEndVacation03\",\r\n                value: values.tableInfo.children[2].dateEnd,\r\n              },\r\n              { name: \"vacationDays\", value: values.tableInfo.day },\r\n            ]);\r\n            if (values.tableInfo.part === \"2\") {\r\n              setShowRow({\r\n                show01: false,\r\n                show02: true,\r\n              });\r\n            } else if (values.tableInfo.part === \"3\") {\r\n              setShowRow({\r\n                show01: false,\r\n                show02: false,\r\n              });\r\n            }\r\n          }}\r\n        >\r\n          <ContainerInfoVacation />\r\n          <ContainerVacation ena={showRow} set={setShowRow} />\r\n        </Form.Provider>\r\n        <ContainerObservation />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport FormPageVacation from \"./layoutPage/FormPageVacation\";\n//import FormOwnSolicitation from \"./layoutPage/FormOwnSolicitation\";\nimport RoutePages from \"./controlers/routes/routes\";\n//import PageLinks from \"./layoutPage/PageLinks\";\n//import { Link } from \"react-router-dom\";\nimport { WorkflowService } from \"./core/workflow.service\";\n\n/* let nome;\nconst DataWorkflow = new WorkflowService();\n\nconst DataUser = DataWorkflow.requestUserData();\nconst Plataform = DataWorkflow.requestPlatformData().then(\n  (data) => data.serviceUrl\n);\n\nconst Variavel = DataWorkflow.requestProcessVariables();\nconst token = DataWorkflow.requestPlatformData().then((data) => data.token);\nDataUser.then((response) => {\n  nome = response.fullname;\n  //console.log(nome);\n  //console.log(typeof nome);\n}); */\n\n/* console.log(\"Dados Usuário 04: \");\nconsole.log(DataUser);\nconsole.log(Plataform);\nconsole.log(Variavel);\nconsole.log(token); */\n//console.log(nome);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormPageVacation />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}